<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>一只博客</title><link>https://fluent12138.github.io/</link><description>用树木去接近星辰是大地的梦想。</description><copyright>一只博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://cdn.acwing.com/media/article/image/2023/05/28/36510_044ec922fc-3.png</url><title>avatar</title><link>https://fluent12138.github.io/</link></image><lastBuildDate>Sun, 10 Mar 2024 08:22:36 +0000</lastBuildDate><managingEditor>一只博客</managingEditor><ttl>60</ttl><webMaster>一只博客</webMaster><item><title>7天用Go从零实现Web框架Gee</title><link>https://fluent12138.github.io//post/7-tian-yong-Go-cong-ling-shi-xian-Web-kuang-jia-Gee.html</link><description>## 准备阶段&#13;
- 环境搭建, 搭了两份&#13;
    - 使用wsl2 ubuntu镜像, 直接命令行安装, 嘎嘎快&#13;
    - windows本机安装go,  [参考链接](https://blog.csdn.net/qq_34902437/article/details/120699775) &#13;
- ide&#13;
    - 熟悉语法阶段: `vim` (y总配置嘎嘎好用)&#13;
    - 正式编写阶段: `idea 2021`&#13;
- 版本控制: `git`&#13;
&#13;
## day1&#13;
- 代码量: `50行`&#13;
- 主要内容&#13;
    - 了解go中http模块的作用&#13;
    - 自定义路由 + 回调方法&#13;
    - 框架结构定义&#13;
&#13;
**框架基本结构**&#13;
```go&#13;
// 文件结构&#13;
.&#13;
├── base1&#13;
│   └── main.go&#13;
├── base2&#13;
│   └── main.go&#13;
└── base3&#13;
    ├── fgee&#13;
    │   ├── fgee.go&#13;
    │   └── go.mod&#13;
    ├── go.mod&#13;
    └── main.go&#13;
&#13;
// 只有一个路由对应的map&#13;
// 比如定义了一个路由为 "/hello", 回调方法为helloFunc, 就会存在这个结构体中 {"/hello" : helloFunc}&#13;
// 当请求了这个路径, 通过路径找到对应方法, 然后执行&#13;
&#13;
type Engine struct {&#13;
	router map[string]HandlerFunc&#13;
}&#13;
```&#13;
&#13;
## day2&#13;
&#13;
- 总代码量:约`140行`, 新增`90行`&#13;
- 主要内容&#13;
    - 封装数据&#13;
        - 定义上下文封装请求过程需要的数据&#13;
        - 封装路由为单独一个模块, `router.go`&#13;
    - 定义通用方法: 例如响应HTML页面, 响应字符串, 响应json数据&#13;
&#13;
**框架基本结构**&#13;
&#13;
```go&#13;
// 文件结构&#13;
.&#13;
├── fgee&#13;
│   ├── context.go&#13;
│   ├── fgee.go&#13;
│   ├── go.mod&#13;
│   └── router.go&#13;
├── go.mod&#13;
└── main.go&#13;
&#13;
// fgee.go文件&#13;
&#13;
type Engine struct {&#13;
	router *router // 由之前的map封装为结构体&#13;
}&#13;
&#13;
// context.go文件&#13;
// Context 上下文结构&#13;
// 在ServeHTTP方法中被创建&#13;
&#13;
type Context struct {&#13;
	// 请求与响应&#13;
	Req    *http.Request&#13;
	Writer http.ResponseWriter&#13;
	// 请求信息&#13;
	Path   string&#13;
	Method string&#13;
	// 响应信息&#13;
	StatusCode int&#13;
}&#13;
&#13;
// 每次请求都会创建一个单独的context, 为这个请求服务&#13;
```&#13;
&#13;
## day3&#13;
&#13;
- 总代码量: 约`290行` 新增代码: 约`150行`&#13;
- 主要内容&#13;
    - 添加动态路由, 使用`字典树`&#13;
    - 支持 `:name`与`*filepath`两种模式&#13;
- 有点忘了字典树是啥了, 写之前还回顾了一下基础课字典树 : )&#13;
&#13;
 **字典树操作** &#13;
 &#13;
- 插入: 对应创建路由时, 把路由插入字典树中&#13;
- 查询: 当请求来临时, 去字典树找到对应的路由&#13;
&#13;
**框架基本结构**&#13;
```go&#13;
// 文件结构&#13;
.&#13;
├── fgee&#13;
│   ├── context.go&#13;
│   ├── fgee.go&#13;
│   ├── go.mod&#13;
│   ├── router.go&#13;
│   ├── router_test.go&#13;
│   └── tire.go&#13;
├── go.mod&#13;
└── main.go&#13;
&#13;
// context.go&#13;
&#13;
// Context 上下文结构&#13;
// 在ServeHTTP方法中被创建&#13;
type Context struct {&#13;
	// 请求与响应&#13;
	Req    *http.Request&#13;
	Writer http.ResponseWriter&#13;
	// 请求信息&#13;
	Path   string&#13;
	Method string&#13;
	// 路由匹配后的参数&#13;
	Params map[string]string&#13;
	// 响应信息&#13;
	StatusCode int&#13;
}&#13;
```&#13;
- 存在问题: 字典树处理不严谨, 路由会冲突, 比如创建路由/:age, 再创建路由/16, 这样就会出现冲突问题&#13;
&#13;
&#13;
**教程链接**&#13;
&#13;
&gt; [7天用Go从零实现Web框架Gee教程](https://geektutu.com/post/gee.html)。</description><guid isPermaLink="true">https://fluent12138.github.io//post/7-tian-yong-Go-cong-ling-shi-xian-Web-kuang-jia-Gee.html</guid><pubDate>Sun, 10 Mar 2024 08:22:06 +0000</pubDate></item><item><title>blog test</title><link>https://fluent12138.github.io//post/blog%20test.html</link><description>test。</description><guid isPermaLink="true">https://fluent12138.github.io//post/blog%20test.html</guid><pubDate>Sun, 10 Mar 2024 07:24:03 +0000</pubDate></item><item><title>关于</title><link>https://fluent12138.github.io//about.html</link><description>## 一个正在努力生活的人&#13;
&#13;
- 正在用的吃饭的家伙&#13;
    - Erlang&#13;
- 以后可能会让我吃上饭的家伙&#13;
    - Go、Java&#13;
    &#13;
**希望大家都能好好吃饭！**。</description><guid isPermaLink="true">https://fluent12138.github.io//about.html</guid><pubDate>Sun, 10 Mar 2024 08:18:58 +0000</pubDate></item></channel></rss>